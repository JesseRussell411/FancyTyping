//This code was generated by LooseGenerate.py
using System;
using System.Collections.Generic;
namespace ExtendedTyping
{
    public struct Loose<T1> : ILoose
    {
        public static implicit operator Loose<T1>(T1 t1) => new Loose<T1>(t1);
        public static explicit operator T1(Loose<T1> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1> left, Loose<T1> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1> left, Loose<T1> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2> : ILoose
    {
        public static implicit operator Loose<T1, T2>(T1 t1) => new Loose<T1, T2>(t1);
        public static implicit operator Loose<T1, T2>(T2 t2) => new Loose<T1, T2>(t2);
        public static explicit operator T1(Loose<T1, T2> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2> left, Loose<T1, T2> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2> left, Loose<T1, T2> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3>(T1 t1) => new Loose<T1, T2, T3>(t1);
        public static implicit operator Loose<T1, T2, T3>(T2 t2) => new Loose<T1, T2, T3>(t2);
        public static implicit operator Loose<T1, T2, T3>(T3 t3) => new Loose<T1, T2, T3>(t3);
        public static explicit operator T1(Loose<T1, T2, T3> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3> left, Loose<T1, T2, T3> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3> left, Loose<T1, T2, T3> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4>(T1 t1) => new Loose<T1, T2, T3, T4>(t1);
        public static implicit operator Loose<T1, T2, T3, T4>(T2 t2) => new Loose<T1, T2, T3, T4>(t2);
        public static implicit operator Loose<T1, T2, T3, T4>(T3 t3) => new Loose<T1, T2, T3, T4>(t3);
        public static implicit operator Loose<T1, T2, T3, T4>(T4 t4) => new Loose<T1, T2, T3, T4>(t4);
        public static explicit operator T1(Loose<T1, T2, T3, T4> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4> left, Loose<T1, T2, T3, T4> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4> left, Loose<T1, T2, T3, T4> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5>(T1 t1) => new Loose<T1, T2, T3, T4, T5>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5>(T2 t2) => new Loose<T1, T2, T3, T4, T5>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5>(T3 t3) => new Loose<T1, T2, T3, T4, T5>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5>(T4 t4) => new Loose<T1, T2, T3, T4, T5>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5>(T5 t5) => new Loose<T1, T2, T3, T4, T5>(t5);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5> left, Loose<T1, T2, T3, T4, T5> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5> left, Loose<T1, T2, T3, T4, T5> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6>(t6);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6> left, Loose<T1, T2, T3, T4, T5, T6> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6> left, Loose<T1, T2, T3, T4, T5, T6> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7>(t7);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7> left, Loose<T1, T2, T3, T4, T5, T6, T7> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7> left, Loose<T1, T2, T3, T4, T5, T6, T7> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8>(t8);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9>(t9);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(t10);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(t11);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(t12);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(t13);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(t14);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(t15);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(t16);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(t17);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(t18);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(t19);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(t20);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(t21);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(t22);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(t23);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(t24);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(t25);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t25);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(T26 t26) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(t26);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        public static explicit operator T26(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.Value is T26 t26 ? t26 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T26), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t25);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T26 t26) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t26);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(T27 t27) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(t27);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        public static explicit operator T26(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T26 t26 ? t26 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T26), self.Value.GetType()));
        public static explicit operator T27(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.Value is T27 t27 ? t27 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T27), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t25);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T26 t26) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t26);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T27 t27) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t27);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(T28 t28) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(t28);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        public static explicit operator T26(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T26 t26 ? t26 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T26), self.Value.GetType()));
        public static explicit operator T27(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T27 t27 ? t27 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T27), self.Value.GetType()));
        public static explicit operator T28(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.Value is T28 t28 ? t28 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T28), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t25);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T26 t26) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t26);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T27 t27) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t27);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T28 t28) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t28);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(T29 t29) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(t29);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        public static explicit operator T26(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T26 t26 ? t26 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T26), self.Value.GetType()));
        public static explicit operator T27(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T27 t27 ? t27 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T27), self.Value.GetType()));
        public static explicit operator T28(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T28 t28 ? t28 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T28), self.Value.GetType()));
        public static explicit operator T29(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.Value is T29 t29 ? t29 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T29), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t25);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T26 t26) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t26);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T27 t27) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t27);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T28 t28) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t28);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T29 t29) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t29);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(T30 t30) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(t30);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        public static explicit operator T26(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T26 t26 ? t26 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T26), self.Value.GetType()));
        public static explicit operator T27(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T27 t27 ? t27 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T27), self.Value.GetType()));
        public static explicit operator T28(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T28 t28 ? t28 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T28), self.Value.GetType()));
        public static explicit operator T29(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T29 t29 ? t29 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T29), self.Value.GetType()));
        public static explicit operator T30(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.Value is T30 t30 ? t30 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T30), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t25);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T26 t26) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t26);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T27 t27) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t27);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T28 t28) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t28);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T29 t29) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t29);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T30 t30) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t30);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(T31 t31) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(t31);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        public static explicit operator T26(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T26 t26 ? t26 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T26), self.Value.GetType()));
        public static explicit operator T27(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T27 t27 ? t27 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T27), self.Value.GetType()));
        public static explicit operator T28(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T28 t28 ? t28 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T28), self.Value.GetType()));
        public static explicit operator T29(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T29 t29 ? t29 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T29), self.Value.GetType()));
        public static explicit operator T30(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T30 t30 ? t30 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T30), self.Value.GetType()));
        public static explicit operator T31(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.Value is T31 t31 ? t31 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T31), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> right) => !left.Value.Equals(right.Value);
    }
    public struct Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> : ILoose
    {
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T1 t1) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t1);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T2 t2) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t2);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T3 t3) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t3);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T4 t4) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t4);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T5 t5) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t5);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T6 t6) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t6);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T7 t7) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t7);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T8 t8) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t8);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T9 t9) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t9);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T10 t10) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t10);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T11 t11) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t11);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T12 t12) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t12);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T13 t13) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t13);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T14 t14) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t14);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T15 t15) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t15);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T16 t16) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t16);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T17 t17) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t17);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T18 t18) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t18);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T19 t19) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t19);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T20 t20) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t20);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T21 t21) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t21);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T22 t22) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t22);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T23 t23) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t23);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T24 t24) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t24);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T25 t25) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t25);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T26 t26) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t26);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T27 t27) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t27);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T28 t28) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t28);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T29 t29) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t29);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T30 t30) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t30);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T31 t31) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t31);
        public static implicit operator Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(T32 t32) => new Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(t32);
        public static explicit operator T1(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T1 t1 ? t1 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T1), self.Value.GetType()));
        public static explicit operator T2(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T2 t2 ? t2 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T2), self.Value.GetType()));
        public static explicit operator T3(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T3 t3 ? t3 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T3), self.Value.GetType()));
        public static explicit operator T4(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T4 t4 ? t4 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T4), self.Value.GetType()));
        public static explicit operator T5(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T5 t5 ? t5 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T5), self.Value.GetType()));
        public static explicit operator T6(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T6 t6 ? t6 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T6), self.Value.GetType()));
        public static explicit operator T7(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T7 t7 ? t7 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T7), self.Value.GetType()));
        public static explicit operator T8(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T8 t8 ? t8 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T8), self.Value.GetType()));
        public static explicit operator T9(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T9 t9 ? t9 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T9), self.Value.GetType()));
        public static explicit operator T10(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T10 t10 ? t10 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T10), self.Value.GetType()));
        public static explicit operator T11(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T11 t11 ? t11 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T11), self.Value.GetType()));
        public static explicit operator T12(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T12 t12 ? t12 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T12), self.Value.GetType()));
        public static explicit operator T13(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T13 t13 ? t13 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T13), self.Value.GetType()));
        public static explicit operator T14(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T14 t14 ? t14 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T14), self.Value.GetType()));
        public static explicit operator T15(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T15 t15 ? t15 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T15), self.Value.GetType()));
        public static explicit operator T16(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T16 t16 ? t16 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T16), self.Value.GetType()));
        public static explicit operator T17(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T17 t17 ? t17 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T17), self.Value.GetType()));
        public static explicit operator T18(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T18 t18 ? t18 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T18), self.Value.GetType()));
        public static explicit operator T19(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T19 t19 ? t19 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T19), self.Value.GetType()));
        public static explicit operator T20(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T20 t20 ? t20 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T20), self.Value.GetType()));
        public static explicit operator T21(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T21 t21 ? t21 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T21), self.Value.GetType()));
        public static explicit operator T22(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T22 t22 ? t22 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T22), self.Value.GetType()));
        public static explicit operator T23(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T23 t23 ? t23 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T23), self.Value.GetType()));
        public static explicit operator T24(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T24 t24 ? t24 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T24), self.Value.GetType()));
        public static explicit operator T25(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T25 t25 ? t25 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T25), self.Value.GetType()));
        public static explicit operator T26(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T26 t26 ? t26 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T26), self.Value.GetType()));
        public static explicit operator T27(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T27 t27 ? t27 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T27), self.Value.GetType()));
        public static explicit operator T28(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T28 t28 ? t28 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T28), self.Value.GetType()));
        public static explicit operator T29(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T29 t29 ? t29 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T29), self.Value.GetType()));
        public static explicit operator T30(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T30 t30 ? t30 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T30), self.Value.GetType()));
        public static explicit operator T31(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T31 t31 ? t31 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T31), self.Value.GetType()));
        public static explicit operator T32(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.Value is T32 t32 ? t32 : throw new InvalidCastException(LooseUtils.GenerateInvalidCastExceptionMessage(self.GetType(), typeof(T32), self.Value.GetType()));
        /// <summary>
        /// The value stored in the current Loose type.
        /// </summary>
        public readonly object Value;
        private Loose(object value) => Value = value;
        public override string ToString() => Value.ToString();
        public override bool Equals(object obj) => Value.Equals(obj);
        public override int GetHashCode() => Value.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Loose type.
        /// </summary>
        public Type Type => Value.GetType();
        /// <summary>
        /// Returns a TypeArray containing all of the types that are allowed.
        /// </summary>
        public readonly IEnumerable<Type> WhiteList = new TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>();
        /// <summary>
        /// Returns a set containing all of the types that are allowed.
        /// </summary>
        public readonly HashSet<Type> WhiteSet = new HashSet<Type>(WiteList);
        public static bool operator ==(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> right) => left.Value.Equals(right.Value);
        public static bool operator !=(Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> left, Loose<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> right) => !left.Value.Equals(right.Value);
    }
}